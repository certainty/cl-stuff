(in-package :cl-algorithms.tests.sort)

(defmacro define-sort-test (test-name function-name)
  (let ((empty-var (gensym))
        (one-element-var (gensym))
        (unsorted-var (gensym))
        (mostly-sorted-var (gensym)))
    `(define-test ,test-name ()
       (let ((,empty-var (vector))
             (,one-element-var (vector 1))
             (,unsorted-var (vector 3 2 5 1 10))
             (,mostly-sorted-var (vector 1 2 3 5 4)))
         (assert-equal ,empty-var (,function-name ,empty-var))
         (assert-equal ,one-element-var (,function-name ,one-element-var))
         (assert-equalp (vector 1 2 3 5 10) (,function-name ,unsorted-var))
         (assert-equalp (vector 1 2 3 4 5) (,function-name ,mostly-sorted-var))))))

(define-sort-test bubble-sort-tests bubble-sort)
(define-sort-test insertion-sort-tests insertion-sort)
